// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ServiceCoffeeRoom.Infrastructure.Entityframework;

#nullable disable

namespace ServiceCoffeeRoom.Infrastructure.Entityframework.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241118114238_addmigration_1")]
    partial class addmigration_1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ServiceСoffeeRoom.Domain.Beans", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Mark")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("RemainingWeight")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("TimeHappened")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("BeansBags");
                });

            modelBuilder.Entity("ServiceСoffeeRoom.Domain.CoffeeMachine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BeansId")
                        .HasColumnType("uuid");

                    b.Property<int>("CountCupAll")
                        .HasColumnType("integer");

                    b.Property<int>("CountCupService")
                        .HasColumnType("integer");

                    b.Property<Guid>("CurrenBeansId")
                        .HasColumnType("uuid");

                    b.Property<int>("LimitService")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("SizeOfOneCup")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BeansId");

                    b.ToTable("CoffeeMachines");
                });

            modelBuilder.Entity("ServiceСoffeeRoom.Domain.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CashAccount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUser")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("TelegramAccaunt")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("ServiceСoffeeRoom.Domain.Processes.CupOfCoffe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TimeHappened")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("VisitorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Cups");
                });

            modelBuilder.Entity("ServiceСoffeeRoom.Domain.Processes.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TimeHappened")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("VisitorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("ServiceСoffeeRoom.Domain.Processes.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TimeHappened")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("VisitorId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("ServiceСoffeeRoom.Domain.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("AdminId")
                        .HasColumnType("bigint");

                    b.Property<int>("Bank")
                        .HasColumnType("integer");

                    b.Property<Guid>("CoffeeMachineId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("PriceService")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("CoffeeMachineId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("ServiceСoffeeRoom.Domain.CoffeeMachine", b =>
                {
                    b.HasOne("ServiceСoffeeRoom.Domain.Beans", "Beans")
                        .WithMany()
                        .HasForeignKey("BeansId");

                    b.Navigation("Beans");
                });

            modelBuilder.Entity("ServiceСoffeeRoom.Domain.Room", b =>
                {
                    b.HasOne("ServiceСoffeeRoom.Domain.Person", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceСoffeeRoom.Domain.CoffeeMachine", "CoffeeMachine")
                        .WithMany()
                        .HasForeignKey("CoffeeMachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("CoffeeMachine");
                });
#pragma warning restore 612, 618
        }
    }
}
